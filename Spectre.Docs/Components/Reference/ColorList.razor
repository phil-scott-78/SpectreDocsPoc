@using System.Reflection
@using Spectre.Console

@if (!_colors.Any())
{
    <p class="text-base-600 dark:text-base-400">Loading colors...</p>
}
else
{
    <p class="text-base-600 dark:text-base-400 mb-4">
        Total colors available: <strong>@_colors.Count</strong>
    </p>

    <div class="not-prose overflow-x-auto">
        <table class="min-w-full divide-y divide-base-200 dark:divide-base-700 border border-base-200 dark:border-base-700">
            <thead class="bg-base-50 dark:bg-base-800">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-base-700 dark:text-base-300 uppercase tracking-wider w-1/3">
                        Color Name
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-base-700 dark:text-base-300 uppercase tracking-wider">
                        Preview & Hex Value
                    </th>
                </tr>
            </thead>
            <tbody class="bg-white dark:bg-base-900 divide-y divide-base-200 dark:divide-base-800">
                @foreach (var color in _colors)
                {
                    <tr class="hover:bg-base-50 dark:hover:bg-base-800/50 transition-colors">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <code class="text-sm bg-base-100 dark:bg-base-800 px-2 py-1 rounded text-base-900 dark:text-base-100">
                                @color.Name
                            </code>
                        </td>
                        <td class="px-6 py-4">
                            <div class="flex items-center gap-3">
                                <div
                                    class="w-8 h-8 rounded border-2 border-base-300 dark:border-base-600 flex-shrink-0"
                                    style="background-color: @("#" + color.HexValue);"
                                    title="@color.HexValue">
                                </div>
                                <code class="text-sm font-mono text-base-700 dark:text-base-300">
                                    @("#" + color.HexValue)
                                </code>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private readonly List<ColorInfo> _colors = [];

    protected override async Task OnInitializedAsync()
    {
        // Load all colors using reflection
        LoadColorsFromSpectreConsole();
    }

    private void LoadColorsFromSpectreConsole()
    {
        try
        {
            // Get the Color struct type
            var colorType = typeof(Spectre.Console.Color);

            // Get all public static properties of type Color
            var colorFields = colorType.GetProperties(BindingFlags.Public | BindingFlags.Static)
                .Where(f => f.PropertyType == colorType)
                .OrderBy(f => f.Name)
                .ToList();

            foreach (var field in colorFields)
            {
                try
                {
                    // Get the Color value from the field
                    var colorValue = field.GetValue(null);

                    if (colorValue is Spectre.Console.Color color)
                    {
                        // Get the hex value using ToHex() method
                        var hexValue = color.ToHex();

                        if (!string.IsNullOrEmpty(hexValue))
                        {
                            _colors.Add(new ColorInfo(field.Name, hexValue));
                        }
                    }
                }
                catch
                {
                    // Skip colors that can't be accessed
                }
            }
        }
        catch (Exception)
        {
            // If reflection fails, colors list will be empty
            // In production, you might want to log this error
        }
    }

    private record ColorInfo(string Name, string HexValue);
}
