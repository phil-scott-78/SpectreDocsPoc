@using System.Reflection
@using System.Text
@using Spectre.Console

@if (!_borders.Any())
{
    <p class="text-base-600 dark:text-base-400">Loading box borders...</p>
}
else
{
    <p class="text-base-600 dark:text-base-400 mb-4">
        Total border styles available: <strong>@_borders.Count</strong>
    </p>

    <div class="not-prose space-y-6">
        @foreach (var border in _borders)
        {
            <div class="border border-base-200 dark:border-base-700 rounded-lg p-6 bg-white dark:bg-base-900">
                <h3 class="text-lg font-semibold mb-4 text-base-900 dark:text-base-100">
                    <code class="text-sm bg-base-100 dark:bg-base-800 px-2 py-1 rounded">
                        BoxBorder.@border.Name
                    </code>
                </h3>
                <pre class="bg-base-50 dark:bg-base-950 p-4 rounded border border-base-200 dark:border-base-800 overflow-x-auto text-sm leading-none"><code>@border.AsciiArt</code></pre>
            </div>
        }
    </div>
}

@code {
    private readonly List<BorderInfo> _borders = [];

    protected override async Task OnInitializedAsync()
    {
        // Load all box borders using reflection
        LoadBoxBordersFromSpectreConsole();
    }

    private void LoadBoxBordersFromSpectreConsole()
    {
        try
        {
            // Get the BoxBorder class type
            var borderType = typeof(Spectre.Console.BoxBorder);

            // Get all public static properties of type BoxBorder
            var borderProperties = borderType.GetProperties(BindingFlags.Public | BindingFlags.Static)
                .Where(p => p.PropertyType == borderType)
                .OrderBy(p => p.Name)
                .ToList();

            foreach (var property in borderProperties)
            {
                try
                {
                    // Get the BoxBorder instance
                    var borderInstance = property.GetValue(null) as Spectre.Console.BoxBorder;

                    if (borderInstance != null)
                    {
                        // Generate ASCII art for this border
                        var asciiArt = GenerateAsciiArt(borderInstance);
                        _borders.Add(new BorderInfo(property.Name, asciiArt));
                    }
                }
                catch
                {
                    // Skip borders that can't be accessed
                }
            }
        }
        catch (Exception)
        {
            // If reflection fails, borders list will be empty
        }
    }

    private string GenerateAsciiArt(Spectre.Console.BoxBorder border)
    {
        var sb = new StringBuilder();

        // Get the BoxBorderPart enum type using reflection
        var spectreAssembly = typeof(Spectre.Console.BoxBorder).Assembly;
        var borderPartType = spectreAssembly.GetTypes()
            .FirstOrDefault(t => t.Name == "BoxBorderPart" && t.IsEnum);

        if (borderPartType == null)
        {
            return "Unable to generate preview";
        }

        // Helper to get a border part character using reflection
        string GetPart(string partName)
        {
            try
            {
                var enumValue = Enum.Parse(borderPartType, partName);
                var getPartMethod = typeof(Spectre.Console.BoxBorder).GetMethod("GetPart");
                if (getPartMethod != null)
                {
                    var result = getPartMethod.Invoke(border, new[] { enumValue });
                    return result?.ToString() ?? " ";
                }
                return " ";
            }
            catch
            {
                return " ";
            }
        }

        // Build a sample box with content
        var boxWidth = 30; // Inner content width

        // Top edge: TopLeft + Top + TopRight
        sb.Append(GetPart("TopLeft"));
        sb.Append(new string(GetPart("Top")[0], boxWidth));
        sb.Append(GetPart("TopRight"));
        sb.AppendLine();

        // Content lines: Left + content + Right
        var contentLines = new[]
        {
            " This is a sample panel       ",
            " with multiple lines of       ",
            " content inside the box.      "
        };

        foreach (var line in contentLines)
        {
            sb.Append(GetPart("Left"));
            sb.Append(line);
            sb.Append(GetPart("Right"));
            sb.AppendLine();
        }

        // Bottom edge: BottomLeft + Bottom + BottomRight
        sb.Append(GetPart("BottomLeft"));
        sb.Append(new string(GetPart("Bottom")[0], boxWidth));
        sb.Append(GetPart("BottomRight"));

        return sb.ToString();
    }

    private record BorderInfo(string Name, string AsciiArt);
}
