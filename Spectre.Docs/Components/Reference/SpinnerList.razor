@using System.Reflection
@using Spectre.Console

@if (!_spinners.Any())
{
    <p class="text-base-600 dark:text-base-400">Loading spinners...</p>
}
else
{
    <p class="text-base-600 dark:text-base-400 mb-4">
        Total spinners available: <strong>@_spinners.Count</strong>
    </p>

    <div class="not-prose overflow-x-auto">
        <table class="min-w-full divide-y divide-base-200 dark:divide-base-700 border border-base-200 dark:border-base-700">
            <thead class="bg-base-50 dark:bg-base-800">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-base-700 dark:text-base-300 uppercase tracking-wider w-1/3">
                        Spinner Name
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-base-700 dark:text-base-300 uppercase tracking-wider">
                        Animation
                    </th>
                </tr>
            </thead>
            <tbody class="bg-white dark:bg-base-900 divide-y divide-base-200 dark:divide-base-800">
                @foreach (var (spinner, index) in _spinners.Select((s, i) => (s, i)))
                {
                    <tr class="hover:bg-base-50 dark:hover:bg-base-800/50 transition-colors">
                        <td class="px-6 py-4 whitespace-nowrap">
                            <code class="text-sm bg-base-100 dark:bg-base-800 px-2 py-1 rounded text-base-900 dark:text-base-100">
                                @spinner.Name
                            </code>
                        </td>
                        <td class="px-6 py-4 h-20">
                            <div
                                id="spinner-@index"
                                class="spinner-animation font-mono text-lg whitespace-pre"
                                data-frames="@System.Text.Json.JsonSerializer.Serialize(spinner.Frames)">
                                @spinner.Frames.FirstOrDefault()
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<script>
    // Animate all spinners on the page
    document.addEventListener('DOMContentLoaded', function() {
        const spinnerElements = document.querySelectorAll('.spinner-animation');

        spinnerElements.forEach(element => {
            const framesJson = element.getAttribute('data-frames');
            if (!framesJson) return;

            try {
                const frames = JSON.parse(framesJson);
                if (!frames || frames.length === 0) return;

                let currentFrame = 0;

                // Animate frames every 150ms
                setInterval(() => {
                    currentFrame = (currentFrame + 1) % frames.length;
                    element.textContent = frames[currentFrame];
                }, 150);
            } catch (e) {
                console.error('Failed to parse frames:', e);
            }
        });
    });
</script>

@code {
    private readonly List<SpinnerInfo> _spinners = [];

    protected override async Task OnInitializedAsync()
    {
        // Load all spinners using reflection
        LoadSpinnersFromSpectreConsole();
    }

    private void LoadSpinnersFromSpectreConsole()
    {
        try
        {
            // Get the Spectre.Console assembly
            var spectreAssembly = typeof(Spectre.Console.AnsiConsole).Assembly;

            // Find the Spinner base class
            var spinnerBaseType = spectreAssembly.GetTypes()
                .FirstOrDefault(t => t.Name == "Spinner" && t.IsAbstract);

            if (spinnerBaseType == null) return;

            // Find all types that inherit from Spinner
            var spinnerTypes = spectreAssembly.GetTypes()
                .Where(t => t.IsClass
                    && !t.IsAbstract
                    && t.IsSubclassOf(spinnerBaseType))
                .OrderBy(t => t.Name)
                .ToList();

            foreach (var spinnerType in spinnerTypes)
            {
                try
                {
                    // Try to create an instance of the spinner
                    var instance = Activator.CreateInstance(spinnerType);

                    if (instance != null)
                    {
                        // Get the Frames property
                        var framesProperty = spinnerType.GetProperty("Frames", BindingFlags.Public | BindingFlags.Instance);

                        if (framesProperty != null)
                        {
                            var frames = framesProperty.GetValue(instance) as System.Collections.IList;

                            if (frames != null && frames.Count > 0)
                            {
                                var frameList = new List<string>();
                                foreach (var frame in frames)
                                {
                                    if (frame != null)
                                    {
                                        frameList.Add(frame.ToString() ?? "");
                                    }
                                }

                                if (frameList.Any())
                                {
                                    // Clean up the spinner name (remove "Spinner" suffix if present)
                                    var name = spinnerType.Name;
                                    if (name.EndsWith("Spinner", StringComparison.OrdinalIgnoreCase))
                                    {
                                        name = name.Substring(0, name.Length - 7);
                                    }

                                    _spinners.Add(new SpinnerInfo(name, frameList));
                                }
                            }
                        }
                    }
                }
                catch
                {
                    // Skip spinners that can't be instantiated
                }
            }
        }
        catch (Exception)
        {
            // If reflection fails, spinners list will be empty
            // In production, you might want to log this error
        }
    }

    private record SpinnerInfo(string Name, List<string> Frames);
}
