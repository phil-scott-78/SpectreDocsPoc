@using System.Reflection
@using Spectre.Console

@if (!_allEmojis.Any())
{
    <p class="text-base-600 dark:text-base-400">Loading emojis...</p>
}
else
{
    <p class="text-base-600 dark:text-base-400 mb-4">
        Total emojis available: <strong>@_allEmojis.Count</strong>
    </p>

    <div class="not-prose overflow-x-auto">
        <table class="min-w-full divide-y divide-base-200 dark:divide-base-700 border border-base-200 dark:border-base-700">
            <thead class="bg-base-50 dark:bg-base-800">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-base-700 dark:text-base-300 uppercase tracking-wider">
                        Emoji
                    </th>
                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-base-700 dark:text-base-300 uppercase tracking-wider">
                        Shortcode
                    </th>
                </tr>
            </thead>
            <tbody class="bg-white dark:bg-base-900 divide-y divide-base-200 dark:divide-base-800">
                @foreach (var emoji in _allEmojis)
                {
                    <tr class="hover:bg-base-50 dark:hover:bg-base-800/50 transition-colors">
                        <td class="px-6 py-4 whitespace-nowrap text-2xl">
                            @emoji.Symbol
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                            <code class="text-sm bg-base-100 dark:bg-base-800 px-2 py-1 rounded text-base-900 dark:text-base-100">
                                @emoji.Code
                            </code>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<EmojiItem> _allEmojis = [];

    protected override async Task OnInitializedAsync()
    {
        // Load all emojis using reflection
        LoadEmojisFromSpectreConsole();
    }

    private void LoadEmojisFromSpectreConsole()
    {
        try
        {
            // Get the Emoji type from Spectre.Console
            var emojiType = typeof(Spectre.Console.Emoji);

            // Access the internal _emojis field using reflection
            var emojisField = emojiType.GetField("_emojis", BindingFlags.NonPublic | BindingFlags.Static);

            if (emojisField != null)
            {
                // Get the value of the _emojis field
                var emojisDict = emojisField.GetValue(null) as System.Collections.IDictionary;

                if (emojisDict != null)
                {
                    // Convert to our emoji list
                    foreach (System.Collections.DictionaryEntry entry in emojisDict)
                    {
                        var shortcode = entry.Key?.ToString();
                        var emoji = entry.Value?.ToString();

                        if (!string.IsNullOrEmpty(shortcode) && !string.IsNullOrEmpty(emoji))
                        {
                            _allEmojis.Add(new EmojiItem(emoji, $":{shortcode}:"));
                        }
                    }

                    // Sort alphabetically by shortcode
                    _allEmojis = _allEmojis.OrderBy(e => e.Code).ToList();
                }
            }
        }
        catch (Exception)
        {
            // If reflection fails, provide a fallback message
            // In production, you might want to log this error
        }
    }

    private record EmojiItem(string Symbol, string Code);
}
